# -*- coding: utf-8 -*-
"""ML Assignment 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18wZaUmuNLrChVmccAfsVj-TBXjXjAQYp
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# X and Y
X_values = np.array([5, 10, 15, 20, 25,30]).reshape(-1, 1)
X_b = np.c_[np.ones((len(X_values), 1)), X_values]
Y_values = 25 * X_values + 10

np.random.seed(42)
noise = np.random.normal(loc=0, scale=50, size=Y_values.shape)
Y_noisy = Y_values + noise

W_noisy = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(Y_noisy)
print("(W):", W_noisy[1])
print("(b):", W_noisy[0])

W = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(Y_values)
print("(W):", W[1])
print("(b):", W[0])
W

print(f"Equation: Y = {round(W[1][0])}*X + {round(W[0][0])}")

X_values

test_X = int(input("Enter an additional X value: "))
test_Y = W[1] * test_X + W[0][0]
X_values = np.append(X_values, [[test_X]], axis=0)
Y_values = np.append(Y_values, [[round(test_Y[0])]], axis=0)

plt.scatter(X_values, Y_values, color='blue', label='Data Points')
plt.plot(X_values, W[1] * X_values + W[0], color='red', label='Regression Line')

plt.grid(True)
plt.show()

df = pd.read_csv('/content/Iris.csv')
df = df.drop('Id', axis=1)
df

df['Species'] = df['Species'].replace({
    'Iris-setosa': 'Class I',
    'Iris-virginica': 'Other classes',
    'Iris-versicolor': 'Other classes'
})

# Splitting the data into train and test sets for Class I
class_I_df = df[df['Species'] == 'Class I']
class_I_train = class_I_df.sample(frac=0.8, random_state=45)
class_I_test = class_I_df.drop(class_I_train.index)

# Splitting the data into train and test sets for Other classes
other_classes_df = df[df['Species'] != 'Class I']
class_II_train = other_classes_df.sample(frac=0.8, random_state=45)
class_II_test = other_classes_df.drop(class_II_train.index)

# Concatenating the train sets
train_df = pd.concat([class_I_train, class_II_train])

# Creating y_test and test_df
y_test = pd.concat([class_I_test, class_II_test])["Species"]
test_df = pd.concat([class_I_test, class_II_test]).drop(columns=["Species"])

X_train = train_df.drop('Species', axis=1).values
X_b = np.c_[np.ones((len(X_train), 1)), X_train]
y_train = np.where(train_df['Species'] == 'Class I', 1, -1)
w = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y_train)

w

test_df.values

w2=test_df.values[1]
w2

prediction = w[-1]*w2[-1]+w[-2]*w2[-2]+w[-3]*w2[-3]+w[-4]*w2[-4]+w[0]
if prediction>0:
  print("Class I")
else:
  print("Other Classes")

predictions = np.dot(X_b, w)
train_predictions=np.where(predictions >= 0, 1, -1)

train_accuracy = np.mean(train_predictions == y_train)
print("Training Accuracy:", train_accuracy*100,"%")

